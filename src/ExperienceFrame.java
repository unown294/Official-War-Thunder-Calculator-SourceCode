
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import static javax.swing.JOptionPane.INFORMATION_MESSAGE;
import javax.swing.table.DefaultTableModel;

/*
 * Copyright (C) 2020 Dalton
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 *
 * @author Dalton
 */
public class ExperienceFrame extends javax.swing.JFrame {

    DatabaseOptions options = new DatabaseOptions();
    DefaultTableModel model;
    DefaultTableModel model2;
    /**
     * Creates new form ExperienceFrame
     */
    public ExperienceFrame() {
        initComponents();
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2, dim.height/2-this.getSize().height/2);
        model = (DefaultTableModel)StartVehicleTable.getModel();
        model2 = (DefaultTableModel)EndVehicleTable.getModel();
        
        updateTableStart();
        updateTableEnd();
    }

    public void updateTableStart(){
        model.setRowCount(0); //Empty the table
        ArrayList <Vehicle> vehicles = new ArrayList <Vehicle>();
        
        vehicles = options.viewVehicle(CountrySelectionComboBox.getSelectedIndex(),VehicleTypeComboBox.getSelectedIndex());
        
        if(vehicles != null){
            //in workers we have record/objects
            
            for(Vehicle vehicle: vehicles){
                
                Object[] addworker = {vehicle.getVehicleName(), 
                    vehicle.getTier(), vehicle.getLinetype_ID()
                };
                
                model.addRow(addworker);
            }
        }
    }
    

    public void updateTableEnd(){
        model2.setRowCount(0); //Empty the table
        ArrayList <Vehicle> vehicles = new ArrayList <Vehicle>();
        
        vehicles = options.viewVehicle(CountrySelectionComboBox.getSelectedIndex(),VehicleTypeComboBox.getSelectedIndex());
        
        if(vehicles != null){
            //in workers we have record/objects
            
            for(Vehicle vehicle: vehicles){
                
                Object[] addworker = {vehicle.getVehicleName(), 
                    vehicle.getTier(), vehicle.getLinetype_ID()
                };
                
                model2.addRow(addworker);
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        CountrySelectionComboBox = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        VehicleTypeComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        StartVehicleTable = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        EndVehicleTable = new javax.swing.JTable();
        StartVehicleIcon = new javax.swing.JLabel();
        EndVehicleIcon = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        TotalRPField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        TotalSilverLionField = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        TotalEagleField = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        CalculateButton = new javax.swing.JButton();
        ConvertButton = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        RP_ResearchedField = new javax.swing.JTextField();
        StartRPField = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        StartTierField = new javax.swing.JTextField();
        StartSilverLionCostField = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        EndRPField = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        EndTierField = new javax.swing.JTextField();
        EndSilverLionCostField = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        StartVehicleNameField = new javax.swing.JTextField();
        EndVehicleNameField = new javax.swing.JTextField();
        ErrorLabel = new javax.swing.JLabel();
        AverageBattleCalculator = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Experience Line Calculator");
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Experience Calculator");

        jButton1.setText("Close");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Select the country your researching: ");

        CountrySelectionComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "America", "Germany", "United Kingdom", "Russia/Soviet Union", "Japan", "China", "Italy", "Sweden", "France" }));
        CountrySelectionComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                CountrySelectionComboBoxItemStateChanged(evt);
            }
        });

        jLabel3.setText("Please select the tech tree type that you are researching:");

        VehicleTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Aircraft", "Tanks", "Naval", "Helicopters" }));
        VehicleTypeComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                VehicleTypeComboBoxItemStateChanged(evt);
            }
        });
        VehicleTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VehicleTypeComboBoxActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Research Start Vehicle");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Research End Vehicle ");

        StartVehicleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vehicle Name", "Tier", "Vehicle Line"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        StartVehicleTable.getTableHeader().setReorderingAllowed(false);
        StartVehicleTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                StartVehicleTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(StartVehicleTable);
        if (StartVehicleTable.getColumnModel().getColumnCount() > 0) {
            StartVehicleTable.getColumnModel().getColumn(1).setMinWidth(10);
            StartVehicleTable.getColumnModel().getColumn(1).setPreferredWidth(35);
            StartVehicleTable.getColumnModel().getColumn(1).setMaxWidth(50);
            StartVehicleTable.getColumnModel().getColumn(2).setMinWidth(5);
            StartVehicleTable.getColumnModel().getColumn(2).setPreferredWidth(70);
            StartVehicleTable.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        EndVehicleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vehicle Name", "Tier", "Vehicle Line"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        EndVehicleTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                EndVehicleTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(EndVehicleTable);
        if (EndVehicleTable.getColumnModel().getColumnCount() > 0) {
            EndVehicleTable.getColumnModel().getColumn(1).setMinWidth(10);
            EndVehicleTable.getColumnModel().getColumn(1).setPreferredWidth(35);
            EndVehicleTable.getColumnModel().getColumn(1).setMaxWidth(50);
            EndVehicleTable.getColumnModel().getColumn(2).setMinWidth(5);
            EndVehicleTable.getColumnModel().getColumn(2).setPreferredWidth(70);
            EndVehicleTable.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        StartVehicleIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/test.png"))); // NOI18N
        StartVehicleIcon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        EndVehicleIcon.setIcon(new javax.swing.ImageIcon(getClass().getResource("/test.png"))); // NOI18N
        EndVehicleIcon.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Research Start Vehicle Icon");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Research End Vehicle Icon");

        jLabel6.setText("Total RP Needed to research the End Vehicle:");

        TotalRPField.setEditable(false);

        jLabel7.setText("Total Silver Lions needed to buy these vehicles:");

        TotalSilverLionField.setEditable(false);

        jLabel12.setText("Total Golden Eagles needed to research these vehicles:");

        TotalEagleField.setEditable(false);

        jLabel13.setText("Golden Eagles");

        jLabel14.setText("Silver Lions");

        jLabel15.setText("RP");

        CalculateButton.setText("Calculate");
        CalculateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateButtonActionPerformed(evt);
            }
        });

        ConvertButton.setText("Convert Golden Eagles");
        ConvertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConvertButtonActionPerformed(evt);
            }
        });

        jLabel16.setText("RP Cost:");

        jLabel17.setText("RP already Researched:");

        RP_ResearchedField.setText("0");
        RP_ResearchedField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RP_ResearchedFieldActionPerformed(evt);
            }
        });

        StartRPField.setEditable(false);

        jLabel18.setText("Silver Lions Cost");

        jLabel19.setText("Tier");

        StartTierField.setEditable(false);
        StartTierField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartTierFieldActionPerformed(evt);
            }
        });

        StartSilverLionCostField.setEditable(false);

        jLabel20.setText("RP Cost:");

        EndRPField.setEditable(false);

        jLabel22.setText("Silver Lions Cost");

        jLabel23.setText("Tier");

        EndTierField.setEditable(false);
        EndTierField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EndTierFieldActionPerformed(evt);
            }
        });

        EndSilverLionCostField.setEditable(false);

        jLabel21.setText("Vehicle Name");

        jLabel24.setText("Vehicle Name");

        StartVehicleNameField.setEditable(false);

        EndVehicleNameField.setEditable(false);

        ErrorLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ErrorLabel.setForeground(new java.awt.Color(255, 0, 0));

        AverageBattleCalculator.setText("Average Battle Calculator");
        AverageBattleCalculator.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AverageBattleCalculatorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(AverageBattleCalculator)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ConvertButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(CalculateButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(TotalSilverLionField, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(VehicleTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(CountrySelectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(TotalRPField, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel15))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 335, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(114, 114, 114)
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(54, 54, 54)
                                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(ErrorLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(StartVehicleIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(EndVehicleIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel16)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(StartRPField))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel17)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(RP_ResearchedField, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel18)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(StartSilverLionCostField))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel19)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(StartTierField))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel20)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(EndRPField))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel22)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(EndSilverLionCostField))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel23)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(EndTierField))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel21)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(StartVehicleNameField))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel24)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(EndVehicleNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)))))))))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TotalEagleField, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CountrySelectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(VehicleTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StartVehicleIcon))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel16)
                                    .addComponent(StartRPField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel17)
                                    .addComponent(RP_ResearchedField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel18)
                                    .addComponent(StartSilverLionCostField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel19)
                                    .addComponent(StartTierField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel21)
                                    .addComponent(StartVehicleNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(EndVehicleIcon, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel20)
                                    .addComponent(EndRPField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel22)
                                    .addComponent(EndSilverLionCostField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel23)
                                    .addComponent(EndTierField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel24)
                                    .addComponent(EndVehicleNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(TotalRPField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15)
                    .addComponent(ErrorLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(TotalSilverLionField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(TotalEagleField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(CalculateButton)
                    .addComponent(ConvertButton)
                    .addComponent(AverageBattleCalculator))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void VehicleTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VehicleTypeComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_VehicleTypeComboBoxActionPerformed

    private void RP_ResearchedFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RP_ResearchedFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RP_ResearchedFieldActionPerformed

    private void EndTierFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EndTierFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_EndTierFieldActionPerformed

    private void StartTierFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartTierFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StartTierFieldActionPerformed

    private void StartVehicleTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_StartVehicleTableMouseClicked
        int selectedRow = StartVehicleTable.getSelectedRow();
        ArrayList<String> Data = options.vehicleInformation(CountrySelectionComboBox.getSelectedIndex(), model.getValueAt(selectedRow, 0).toString());
        
        StartTierField.setText(model.getValueAt(selectedRow, 1).toString());
        StartVehicleNameField.setText(model.getValueAt(selectedRow, 0).toString());
            
//        try {
//            //Update image icon
//            StartVehicleIcon.setIcon(new ImageIcon(ImageIO.read(getClass().getResource("..\\WarThunderVehicleIcons\\" + Data.get(3)))));
//        } catch (IOException ex) {
//            Logger.getLogger(ExperienceFrame.class.getName()).log(Level.SEVERE, null, ex);
//            try {
//                StartVehicleIcon.setIcon(new ImageIcon(ImageIO.read(getClass().getResource("..\\WarThunderVehicleIcons\\imagenotfound.png"))));
//            } catch (IOException ex1) {
//                Logger.getLogger(ExperienceFrame.class.getName()).log(Level.SEVERE, null, ex1);
//            }
//        }
        
        //This should pull the image from the internet via the file name associated in the database
        URL url;
        if(Data.get(3).equals("test.png")){
            try {
                StartVehicleIcon.setIcon(new ImageIcon(ImageIO.read(getClass().getResource("..\\test.png"))));
            } catch (IOException ex) {
                Logger.getLogger(ExperienceFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                url = new URL("https://encyclopedia.warthunder.com/images/"+Data.get(3));
                BufferedImage c = ImageIO.read(url);
                ImageIcon image = new ImageIcon(c);
                StartVehicleIcon.setIcon(image);
            } catch (MalformedURLException ex) {
                Logger.getLogger(ExperienceFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                //IF image isnt found this will re-enstate the place holder image to take its place
                try {
                    Logger.getLogger(ExperienceFrame.class.getName()).log(Level.SEVERE, null, ex);
                    StartVehicleIcon.setIcon(new ImageIcon(ImageIO.read(getClass().getResource("..\\test.png"))));
                } catch (IOException ex1) {
                    Logger.getLogger(ExperienceFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
            if(Data.get(3).equals("test.png")){
                try {
                    StartVehicleIcon.setIcon(new ImageIcon(ImageIO.read(getClass().getResource("..\\test.png"))));
                } catch (IOException ex) {
                    Logger.getLogger(ExperienceFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        
        //Update information on the right
        StartRPField.setText(Data.get(1));
        StartSilverLionCostField.setText(Data.get(2));        
        
    }//GEN-LAST:event_StartVehicleTableMouseClicked

    private void EndVehicleTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_EndVehicleTableMouseClicked
        int selectedRow = EndVehicleTable.getSelectedRow();
        ArrayList<String> Data = options.vehicleInformation(CountrySelectionComboBox.getSelectedIndex(), model.getValueAt(selectedRow, 0).toString());
        
        EndTierField.setText(model.getValueAt(selectedRow, 1).toString());
        EndVehicleNameField.setText(model.getValueAt(selectedRow, 0).toString());
            
//        //Update image icon
//        try {   
//            EndVehicleIcon.setIcon(new ImageIcon(ImageIO.read(getClass().getResource("..\\WarThunderVehicleIcons\\" + Data.get(3)))));
//        } catch (IOException ex) {
//            try {
//                //IF image isnt found this will re-enstate the place holder image to take its place
//                Logger.getLogger(ExperienceFrame.class.getName()).log(Level.SEVERE, null, ex);
//                EndVehicleIcon.setIcon(new ImageIcon(ImageIO.read(getClass().getResource("..\\WarThunderVehicleIcons\\imagenotfound.png"))));
//            } catch (IOException ex1) {
//                Logger.getLogger(ExperienceFrame.class.getName()).log(Level.SEVERE, null, ex1);
//            }
//        }
                
        //This should pull the image from the internet via the file name associated in the database
        URL url;
        if(Data.get(3).equals("test.png")){
            try {
                EndVehicleIcon.setIcon(new ImageIcon(ImageIO.read(getClass().getResource("..\\test.png"))));
            } catch (IOException ex) {
                Logger.getLogger(ExperienceFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        else{
            try {
                url = new URL("https://encyclopedia.warthunder.com/images/"+Data.get(3));
                BufferedImage c = ImageIO.read(url);
                ImageIcon image = new ImageIcon(c);
                EndVehicleIcon.setIcon(image);
            } catch (MalformedURLException ex) {
                Logger.getLogger(ExperienceFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                try {
                    //IF image isnt found this will re-enstate the place holder image to take its place
                    Logger.getLogger(ExperienceFrame.class.getName()).log(Level.SEVERE, null, ex);
                    EndVehicleIcon.setIcon(new ImageIcon(ImageIO.read(getClass().getResource("..\\test.png"))));
                } catch (IOException ex1) {
                    Logger.getLogger(ExperienceFrame.class.getName()).log(Level.SEVERE, null, ex1);
                }
            }
        }
        //Update information on the right
        EndRPField.setText(Data.get(1));
        EndSilverLionCostField.setText(Data.get(2));
        
    }//GEN-LAST:event_EndVehicleTableMouseClicked

    private void CalculateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculateButtonActionPerformed
        int selectedRowEnd = EndVehicleTable.getSelectedRow();
        int selectedRowStart = StartVehicleTable.getSelectedRow();
                
        String StartVehicle = model.getValueAt(selectedRowStart, 0).toString();
        String EndVehicle = model.getValueAt(selectedRowEnd, 0).toString();
        int CountryID = CountrySelectionComboBox.getSelectedIndex();
        int VehicleID = VehicleTypeComboBox.getSelectedIndex();
                        
        //Folder Finder
        //this is used for determining if the vehicle is a folder vehicle or not. If it is it calculates it into the system
        //Necessary for processing the Naval and Helicopter lines because of layouts
        int FolderValueStart = options.FolderFinder(CountryID, StartVehicle);
        int FolderValue = options.FolderFinder(CountryID, EndVehicle);
        
        //JOptionPane.showMessageDialog(null, "The folder value is " + FolderValue, "Error", ERROR_MESSAGE); 
        
        int LineIDTypeStart = Integer.parseInt(model.getValueAt(selectedRowStart, 2).toString());
        int LineIDTypeEnd = Integer.parseInt(model.getValueAt(selectedRowEnd, 2).toString());
        int RP_researchFieldValue = 0;
        
        if(Integer.parseInt(RP_ResearchedField.getText()) > 0){
            RP_researchFieldValue = Integer.parseInt(RP_ResearchedField.getText());
        }
        if(VehicleID == 0 || VehicleID == 1 ){
            if(LineIDTypeStart != LineIDTypeEnd){
                JOptionPane.showMessageDialog(null, "Please select a vehicle of the same line type (the numbers in column labeled 'Vehicle Line')", "Error", ERROR_MESSAGE); 
            }
            else{
                int LineIDValue = Integer.parseInt(model.getValueAt(selectedRowStart, 2).toString());
                ArrayList<Integer> Range = options.VehicleLineIDFinder(StartVehicle, EndVehicle, CountryID);
                long Total_RP = options.RP_Cost_finder2(Range.get(0),Range.get(1),LineIDValue, CountryID, VehicleID) - RP_researchFieldValue;
                long Total_Silver = options.LION_Cost_finder2(Range.get(0),Range.get(1),LineIDValue, CountryID, VehicleID);

//                if(FolderValue >= 1){
//                    Total_RP += options.FolderRPCalculator(CountryID, VehicleID, FolderValue, Range.get(1), LineIDValue);
//                    Total_Silver += options.FolderLionCalculator(CountryID, VehicleID, FolderValue, Range.get(1), LineIDValue);
//                }

                int divisible_rp = options.RP_Value();

                //Calculation
                int TotalEagle = (int) Total_RP / divisible_rp;

                TotalRPField.setText(Long.toString(Total_RP));
                TotalSilverLionField.setText(Long.toString(Total_Silver));
                TotalEagleField.setText(Integer.toString(TotalEagle));
            }
        }
        else if(VehicleID == 2){
            // This will have the traditional line reader followed by ID system of what Boats are needed to finish the research. 
            // The reason this was decided is that if the lateral was a straight line the system implemented with aircraft and tanks would work here.
            // Due to the line deviating more than once then the system would require for loops and specific SELECT SQL queries per deviation
            // As this is the case a string will be added that will create an array for the ID for the vehicles to research into lateral side of research. If a better system can be implemented it will be persued
            
            //Override command from database to execute a seried search command. This calls upon the ID of the vehicle in order to do calculations
            if(FolderValue >= 15){
                
            }            
            else{
                if(FolderValueStart != 0){
                    int LineIDValue = Integer.parseInt(model.getValueAt(selectedRowStart, 2).toString());
                    ArrayList<Integer> Range = options.VehicleLineIDFinder(StartVehicle, EndVehicle, CountryID);
                    long Total_RP = options.RP_Cost_finder(Range.get(0),Range.get(1),LineIDValue, CountryID, VehicleID) - RP_researchFieldValue;
                    long Total_Silver = options.LION_Cost_finder(Range.get(0),Range.get(1),LineIDValue, CountryID, VehicleID);

                    if(FolderValue >= 1 && Range.get(0) <= Range.get(1) && FolderValueStart <= FolderValue){
                        Total_RP += options.FolderRPCalculator(CountryID, VehicleID, FolderValue, Range.get(1), LineIDValue);
                        Total_Silver += options.FolderLionCalculator(CountryID, VehicleID, FolderValue, Range.get(1), LineIDValue);
                    }

                    int divisible_rp = options.RP_Value();

                    //Calculation
                    int TotalEagle = (int) Total_RP / divisible_rp;

                    TotalRPField.setText(Long.toString(Total_RP));
                    TotalSilverLionField.setText(Long.toString(Total_Silver));
                    TotalEagleField.setText(Integer.toString(TotalEagle));
                    }
                else{
                    int LineIDValue = Integer.parseInt(model.getValueAt(selectedRowStart, 2).toString());
                    ArrayList<Integer> Range = options.VehicleLineIDFinder(StartVehicle, EndVehicle, CountryID);
                    long Total_RP = options.RP_Cost_finder2(Range.get(0),Range.get(1),LineIDValue, CountryID, VehicleID) - RP_researchFieldValue;
                    long Total_Silver = options.LION_Cost_finder2(Range.get(0),Range.get(1),LineIDValue, CountryID, VehicleID);

    //                if(FolderValue >= 1){
    //                    Total_RP += options.FolderRPCalculator(CountryID, VehicleID, FolderValue, Range.get(1), LineIDValue);
    //                    Total_Silver += options.FolderLionCalculator(CountryID, VehicleID, FolderValue, Range.get(1), LineIDValue);
    //                }

                    int divisible_rp = options.RP_Value();

                    //Calculation
                    int TotalEagle = (int) Total_RP / divisible_rp;

                    TotalRPField.setText(Long.toString(Total_RP));
                    TotalSilverLionField.setText(Long.toString(Total_Silver));
                    TotalEagleField.setText(Integer.toString(TotalEagle));
                }
            }
        }
        else{
            // This will not have the traditional line reader. 
            // The reason this was decided is that if the Folder path isnt consistent with other lines that can be used.
            // Due to the line deviating more than once then the system would require for loops and specific SELECT SQL queries per deviation
            // As this is the case a string will be added that will create an array for the ID for the vehicles to research into lateral side of research. If a better system can be implemented it will be persued
            
            int LineIDValue = Integer.parseInt(model.getValueAt(selectedRowStart, 2).toString());
            ArrayList<Integer> Range = options.VehicleLineIDFinder(StartVehicle, EndVehicle, CountryID);
            long Total_RP = options.RP_Cost_finder(Range.get(0),Range.get(1),LineIDValue, CountryID, VehicleID) - RP_researchFieldValue;
            long Total_Silver = options.LION_Cost_finder(Range.get(0),Range.get(1),LineIDValue, CountryID, VehicleID);

            if(FolderValue >= 1 && Range.get(0) <= Range.get(1) && FolderValueStart <= FolderValue){
                Total_RP += options.FolderRPCalculator(CountryID, VehicleID, FolderValue, Range.get(1), LineIDValue);
                Total_Silver += options.FolderLionCalculator(CountryID, VehicleID, FolderValue, Range.get(1), LineIDValue);
            }

            int divisible_rp = options.RP_Value();

            //Calculation
            int TotalEagle = (int) Total_RP / divisible_rp;

            TotalRPField.setText(Long.toString(Total_RP));
            TotalSilverLionField.setText(Long.toString(Total_Silver));
            TotalEagleField.setText(Integer.toString(TotalEagle));
        }
    }//GEN-LAST:event_CalculateButtonActionPerformed

    private void ConvertButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConvertButtonActionPerformed
        if(TotalEagleField.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please calculate something before converting to golden eagles", "Error", ERROR_MESSAGE); 
        }
        else{
            JOptionPane.showMessageDialog(null, golden_egale_conversions.Lowest_Possible_ge(Integer.parseInt(TotalEagleField.getText())), "Converted Amount", INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_ConvertButtonActionPerformed

    private void CountrySelectionComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_CountrySelectionComboBoxItemStateChanged
        updateTableStart();
        updateTableEnd();
    }//GEN-LAST:event_CountrySelectionComboBoxItemStateChanged

    private void VehicleTypeComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_VehicleTypeComboBoxItemStateChanged
        updateTableStart();
        updateTableEnd();
    }//GEN-LAST:event_VehicleTypeComboBoxItemStateChanged

    private void AverageBattleCalculatorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AverageBattleCalculatorActionPerformed
        if(TotalEagleField.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please calculate something before openning Average Battle Calculator", "Error", ERROR_MESSAGE); 
        }
        else{
            AverageBattleFrame averageFrame = new AverageBattleFrame(TotalRPField.getText());
            averageFrame.setDefaultCloseOperation(JFrame.HIDE_ON_CLOSE);
            averageFrame.setVisible(true);
    //        averageFrame.transferValue = ;
        }
    }//GEN-LAST:event_AverageBattleCalculatorActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ExperienceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ExperienceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ExperienceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ExperienceFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ExperienceFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AverageBattleCalculator;
    private javax.swing.JButton CalculateButton;
    private javax.swing.JButton ConvertButton;
    private javax.swing.JComboBox<String> CountrySelectionComboBox;
    private javax.swing.JTextField EndRPField;
    private javax.swing.JTextField EndSilverLionCostField;
    private javax.swing.JTextField EndTierField;
    private javax.swing.JLabel EndVehicleIcon;
    private javax.swing.JTextField EndVehicleNameField;
    private javax.swing.JTable EndVehicleTable;
    private javax.swing.JLabel ErrorLabel;
    private javax.swing.JTextField RP_ResearchedField;
    private javax.swing.JTextField StartRPField;
    private javax.swing.JTextField StartSilverLionCostField;
    private javax.swing.JTextField StartTierField;
    private javax.swing.JLabel StartVehicleIcon;
    private javax.swing.JTextField StartVehicleNameField;
    private javax.swing.JTable StartVehicleTable;
    private javax.swing.JTextField TotalEagleField;
    private javax.swing.JTextField TotalRPField;
    private javax.swing.JTextField TotalSilverLionField;
    private javax.swing.JComboBox<String> VehicleTypeComboBox;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    // End of variables declaration//GEN-END:variables
}
